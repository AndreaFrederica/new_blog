---
import Markdown from "@components/misc/Markdown.astro";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { licenses, getLicenseById } from "../../licenses";
import { siteConfig } from "../../config";
import markdownIt from "markdown-it";

export function getStaticPaths() {
  return licenses.map((l) => ({ params: { id: l.id } }));
}

const { id } = Astro.params as { id: string };
const lic = id ? getLicenseById(id) : undefined;

if (!lic) {
  return Astro.redirect("/404");
}

// Preload all license markdown files as raw text so it works on Workers
const mdModules = import.meta.glob("../../licenses/*.md", { query: "?raw", import: "default", eager: true }) as Record<string, string>;

// Helper to fetch raw content by filename from the eager glob map
function readMarkdownFromBundle(filename: string): string | null {
  const keys = Object.keys(mdModules);
  // Keys are Vite module IDs like '../../licenses/xxx.md'
  const matchKey = keys.find((k) => k.endsWith(`/licenses/${filename}`));
  return matchKey ? mdModules[matchKey] : null;
}

// i18n-aware doc resolution: try default lang variant, generic, then any available language
async function resolveMarkdownHtml(licenseId: string) {
  const supported = siteConfig.supportedLangs || ["en"]; // order matters
  const defaultLang = siteConfig.defaultLang || siteConfig.lang || "zh_cn";
  const candidates: string[] = [];
  // prefer explicit mapping
  if (lic?.doc) candidates.push(lic.doc);
  // try default language specific doc
  candidates.push(`${licenseId}_${defaultLang}.md`);
  // then generic
  candidates.push(`${licenseId}.md`);
  // then other supported languages
  for (const l of supported) {
    if (l !== defaultLang) candidates.push(`${licenseId}_${l}.md`);
  }
  // de-dup
  const seen = new Set<string>();
  const uniq = candidates.filter((f) => {
    if (seen.has(f)) return false;
    seen.add(f);
    return true;
  });

  for (const file of uniq) {
    const content = readMarkdownFromBundle(file);
    if (content) {
      const md = markdownIt({ html: true, linkify: true, breaks: false });
      return md.render(content);
    }
  }
  return `<p>License document not found.</p>`;
}

const html = await resolveMarkdownHtml(lic.id);
---
<MainGridLayout title={lic.name["zh_cn"] || lic.name["en"] || lic.id} description={lic.name["en"] || lic.id}>
  <div class="flex w-full overflow-hidden relative min-h-32">
    <div class="card-base z-10 px-9 py-6 relative w-full ">
      <Markdown class="mt-2">
        <div set:html={html} />
      </Markdown>
    </div>
  </div>
</MainGridLayout>
