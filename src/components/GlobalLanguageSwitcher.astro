---
import {
	getFallbackUrl,
	getLanguageName,
	getLanguageSwitchUrl,
	isDefaultLanguage,
} from "@utils/i18n-utils";
import { Icon } from "astro-icon/components";
import { siteConfig } from "@/config";

// 将支持的语言列表传递给客户端脚本
const supportedLangsJson = JSON.stringify(
	siteConfig.supportedLangs || ["zh_cn", "en"],
);

interface Props {
	currentUrl?: string;
}

const { currentUrl } = Astro.props;
const currentPath = currentUrl || Astro.url.pathname;

// 从URL中提取当前语言
function getCurrentLanguage(path: string): string {
	const match = path.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
	if (match && siteConfig.supportedLangs?.includes(match[1])) {
		return match[1];
	}
	return siteConfig.defaultLang || "zh_cn";
}

const currentLang = getCurrentLanguage(currentPath);
const supportedLangs = siteConfig.supportedLangs || ["zh_cn", "en"];

// 如果只有一种语言或者禁用了语言切换器，不显示
const shouldShow = siteConfig.showLanguageSwitcher && supportedLangs.length > 1;
---

<!-- 隐藏的数据元素，用于传递支持的语言列表给客户端脚本 -->
<script type="application/json" id="supported-langs-data" style="display: none;">{supportedLangsJson}</script>

{shouldShow && (
	<div class="relative z-50" role="menu" tabindex="-1" id="global-language-switcher">
		<button 
			aria-label="Language Switcher" 
			role="menuitem" 
			class="btn-plain scale-animation h-11 px-3 active:scale-90 flex items-center gap-1" 
			id="lang-trigger"
		>
			<Icon name="material-symbols:language" class="text-[1.25rem]" />
			<span class="lang-text text-sm font-medium hidden sm:inline">{getLanguageName(currentLang)}</span>
			<Icon name="material-symbols:keyboard-arrow-down" class="text-[1rem] hidden sm:inline" />
		</button>
		<div 
			id="lang-dropdown" 
			class="hidden absolute transition float-panel-closed top-11 -right-2 pt-5"
		>
			<div class="card-base float-panel p-2 min-w-[140px]">
				{supportedLangs.map(lang => {
					const isActive = lang === currentLang;
					const url = getLanguageSwitchUrl(currentPath, lang);
					return (
						<a 
							href={url}
							class:list={[
								"btn-plain scale-animation h-10 px-4 w-full justify-start active:scale-95 text-base whitespace-nowrap min-w-[120px]",
								{ "text-[var(--primary)] font-medium": isActive }
							]}
							title={`切换到${getLanguageName(lang)}`}
							role="menuitem"
						>
							{getLanguageName(lang)}
						</a>
					);
				})}
			</div>
		</div>
	</div>
)}



<script>
	// Cookie 工具函数
	function setCookie(name: string, value: string, days: number = 365) {
		const expires = new Date();
		expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
		document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
	}

	function getCookie(name: string): string | null {
		const nameEQ = name + "=";
		const ca = document.cookie.split(';');
		for (let i = 0; i < ca.length; i++) {
			let c = ca[i];
			while (c.charAt(0) === ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	// 显示和隐藏面板的函数
	function showPanel() {
		const panel = document.querySelector("#lang-dropdown");
		if (panel) {
			panel.classList.remove("hidden");
			panel.classList.remove("float-panel-closed");
		}
	}

	function hidePanel() {
		const panel = document.querySelector("#lang-dropdown");
		if (panel) {
			panel.classList.add("float-panel-closed");
			// 延迟添加hidden类，让动画完成
			setTimeout(() => {
				panel.classList.add("hidden");
			}, 150);
		}
	}

	// 获取浏览器首选语言的函数
	function getBrowserPreferredLanguage(): string {
		let supportedLangs: string[];
		try {
			const dataElement = document.getElementById('supported-langs-data');
			const textContent = dataElement?.textContent?.trim();
			if (textContent && textContent !== '') {
				supportedLangs = JSON.parse(textContent);
			} else {
				supportedLangs = ['zh_cn', 'en'];
			}
		} catch (error) {
			console.warn('Failed to parse supported languages data, using default:', error);
			supportedLangs = ['zh_cn', 'en'];
		}
		const browserLangs = navigator.languages || [navigator.language];
		
		for (const browserLang of browserLangs) {
			const normalizedLang = browserLang.toLowerCase().replace('-', '_');
			
			// 繁体中文（港澳台）映射到简体中文
			if (normalizedLang === 'zh_tw' || normalizedLang === 'zh_hk' || normalizedLang === 'zh_mo') {
				return 'zh_cn';
			}
			
			if (supportedLangs.includes(normalizedLang)) {
				return normalizedLang;
			}
			// 尝试匹配语言的主要部分（如 en-US -> en）
			const mainLang = normalizedLang.split('_')[0];
			if (supportedLangs.includes(mainLang)) {
				return mainLang;
			}
		}
		
		return 'en'; // 默认语言改为英文
	}

	// 检查是否是有效的页面路径
	function isValidPagePath(path: string): boolean {
		// 移除语言前缀进行检查
		const pathWithoutLang = path.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, '/');
		
		// 定义有效的页面路径模式
		const validPaths = [
			'/', // 首页
			'/about', // 关于页面
			'/archive', // 归档页面
			/^\/posts\/.+$/, // 文章页面
			/^\/archive\/category\/.+$/, // 分类页面
			/^\/archive\/tag\/.+$/, // 标签页面
			/^\/\d+$/ // 分页页面
		];
		
		// 检查路径是否匹配有效模式
		return validPaths.some(pattern => {
			if (typeof pattern === 'string') {
				return pathWithoutLang === pattern;
			} else {
				return pattern.test(pathWithoutLang);
			}
		});
	}
	
	// 检查语言偏好的函数
	function checkLanguagePreference() {
		console.log('checkLanguagePreference called');
		const currentPath = window.location.pathname;
		console.log('Current path:', currentPath);
		
		// 暂时禁用自动语言检测，避免干扰手动切换
		console.log('Auto language detection disabled');
		return;
		
	}

	// 更新下拉框显示状态的函数
	function updateDropdownState() {
		const currentPath = window.location.pathname;
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		const currentLang = currentLangMatch ? currentLangMatch[1] : 'zh_cn';
		
		// 更新触发按钮显示的语言
		const langTrigger = document.getElementById('lang-trigger');
		if (langTrigger) {
			const langText = langTrigger.querySelector('.lang-text');
			if (langText) {
				// 根据当前语言更新显示文本
				const langNames: { [key: string]: string } = {
					'zh_cn': '中文',
					'en': 'English',
					'ja': '日本語',
					'ru': 'Русский'
				};
				langText.textContent = langNames[currentLang] || '中文';
			}
		}
		
		// 更新下拉选项的激活状态
		const langOptions = document.querySelectorAll('#lang-dropdown a');
		langOptions.forEach(option => {
			const optionLang = option.getAttribute('href')?.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i)?.[1] || 'zh_cn';
			if (optionLang === 'zh_cn' && option.getAttribute('href') === '/') {
				// 处理默认语言的根路径情况
				if (currentLang === 'zh_cn') {
					option.classList.add('active-lang');
				} else {
					option.classList.remove('active-lang');
				}
			} else if (optionLang === currentLang) {
				option.classList.add('active-lang');
			} else {
				option.classList.remove('active-lang');
			}
		});
	}
	
	// 页面加载时检查语言偏好并设置事件监听器
	document.addEventListener('DOMContentLoaded', () => {
		checkLanguagePreference();
		updateDropdownState();
		
		const langTrigger = document.getElementById('lang-trigger');
		const langSwitcher = document.getElementById('global-language-switcher');
		const langDropdown = document.getElementById('lang-dropdown');
		
		if (langTrigger && langSwitcher && langDropdown) {
			// 检测是否为触摸设备
			const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
			
			if (isTouchDevice) {
				// 移动设备：使用点击事件
				langTrigger.addEventListener('click', (e) => {
					e.preventDefault();
					e.stopPropagation();
					const isVisible = !langDropdown.classList.contains('hidden');
					if (isVisible) {
						hidePanel();
					} else {
						showPanel();
					}
				});
				
				// 点击其他地方关闭面板
				document.addEventListener('click', (e) => {
					if (!langSwitcher.contains(e.target as Node)) {
						hidePanel();
					}
				});
			} else {
				// 桌面设备：使用鼠标悬停事件
				langTrigger.addEventListener('mouseenter', showPanel);
				langSwitcher.addEventListener('mouseleave', hidePanel);
			}
		}
	});
	
	// 监听语言变化事件，更新UI状态
	window.addEventListener('languageChanged', () => {
		updateDropdownState();
	});
	
	// 处理语言切换点击事件 - 完全在客户端处理URL计算
	document.addEventListener('click', (e) => {
		const target = e.target as HTMLElement;
		const langDropdown = document.getElementById('lang-dropdown');
		
		// 如果点击的是语言选项链接
		if (target.tagName === 'A' && langDropdown && langDropdown.contains(target)) {
			e.preventDefault(); // 阻止默认的链接跳转
			
			const href = target.getAttribute('href');
			if (href && href.startsWith('#lang-')) {
				// 从href中提取目标语言
				const targetLang = href.replace('#lang-', '');
				
				// 保存语言偏好到cookie
				setCookie('preferred-language', targetLang);
				
				// 设置手动切换标记，防止自动语言检测干扰
				sessionStorage.setItem('manual-lang-switch', 'true');
				
				// 触发语言变化事件
				window.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang: targetLang } }));
				
				// 隐藏下拉面板
				hidePanel();
				
				// 客户端计算目标URL
				const currentPath = window.location.pathname;
				const targetUrl = calculateTargetUrl(currentPath, targetLang);
				
				console.log('Language switch:', targetLang, 'Target URL:', targetUrl);
				
				// 直接跳转到目标URL
				window.location.href = targetUrl;
			}
		}
	});

	// 客户端URL计算函数
	function calculateTargetUrl(currentPath: string, targetLang: string): string {
		// 提取当前语言前缀
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/.*)?$/i);
		const hasLangPrefix = currentLangMatch && currentLangMatch[1];
		
		// 移除当前语言前缀，得到清洁的URL
		let cleanUrl = currentPath;
		if (hasLangPrefix) {
			cleanUrl = currentPath.replace(new RegExp(`^/${hasLangPrefix}(?:/|$)`), '/');
			// 如果结果是单独的斜杠且原URL不是根路径，需要保持原有路径结构
			if (cleanUrl === '/' && currentPath !== `/${hasLangPrefix}` && currentPath !== `/${hasLangPrefix}/`) {
				cleanUrl = currentPath.replace(new RegExp(`^/${hasLangPrefix}`), '');
			}
		}
		
		// 构建目标URL
		if (targetLang === 'zh_cn') {
			// 切换到默认语言（中文）
			return cleanUrl || '/';
		} else {
			// 切换到其他语言
			if (cleanUrl === '/') {
				return `/${targetLang}`;
			} else {
				return `/${targetLang}${cleanUrl}`;
			}
		}
	}
</script>

<style>
	.active-lang {
		color: var(--primary) !important;
		font-weight: 500 !important;
		background-color: var(--btn-plain-bg-hover) !important;
	}
</style>
