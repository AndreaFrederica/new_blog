---
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";
import {
	getAllTagList,
	getNoteTagList,
	getTagList,
} from "../../utils/content-utils";
import { getNotesTagUrl, getTagUrlWithLang } from "../../utils/i18n-utils";
import ButtonTag from "../control/ButtonTag.astro";
import WidgetLayout from "./WidgetLayout.astro";

interface Props {
	class?: string;
	style?: string;
	lang?: string;
	scope?: "posts" | "notes" | "all";
}
const className = Astro.props.class;
const style = Astro.props.style;
const lang = Astro.props.lang;
const scope = Astro.props.scope || "posts";

let tags: { name: string; count: number }[];
if (scope === "notes") {
	tags = await getNoteTagList(lang);
} else if (scope === "all") {
	tags = await getAllTagList(lang);
} else {
	tags = await getTagList(lang);
}

const COLLAPSED_HEIGHT = "7.5rem";

const isCollapsed = tags.length >= 20;
---
<WidgetLayout name={i18n(I18nKey.tags, lang)} id="tags" isCollapsed={isCollapsed} collapsedHeight={COLLAPSED_HEIGHT} class={className} style={style}>
    <div id="tags-list" class="flex gap-2 flex-wrap">
        {tags.map(t => (
            <ButtonTag href={scope === 'notes' ? getNotesTagUrl(t.name) : getTagUrlWithLang(t.name, lang)} label={`View all posts with the ${t.name.trim()} tag`}>
                {t.name.trim()}
            </ButtonTag>
        ))}
    </div>
</WidgetLayout>

<script>
// 更新标签控件标题的函数
function updateTagsTitle(lang: string) {
    // 定义翻译映射
    const translations = {
        'zh_cn': '标签',
        'en': 'Tags',
        'ja': 'タグ',
        'ru': 'Теги'
    };
    
    const currentTranslation = translations[lang as keyof typeof translations] || translations['zh_cn'];
    
    // 更新标签控件的标题
    const tagsWidget = document.querySelector('widget-layout[data-id="tags"]');
    if (tagsWidget) {
        const titleElement = tagsWidget.querySelector('div.font-bold');
        if (titleElement) {
            titleElement.textContent = currentTranslation;
        }
    }
}

// 监听语言变化事件
function setupTagsLanguageListener() {
    window.addEventListener('languageChanged', (event: Event) => {
        const customEvent = event as CustomEvent<{ lang?: string }>;
        if (customEvent.detail?.lang) {
            updateTagsTitle(customEvent.detail.lang);
        }
    });
}

// 页面加载时设置监听器
document.addEventListener('DOMContentLoaded', () => {
    //console.log('[Sidebar/Tags] DOMContentLoaded');
    setupTagsLanguageListener();

    type Params = { lang: string; defaultLang: string; scope: 'posts'|'notes'|'all' };
    async function refreshTags(params: Params) {
        try {
            const { lang, defaultLang, scope } = params;
            // prefer inline JSON embedded by server for this page
            const inlineEl = document.getElementById('sidebar-data');
            type TagItem = { name: string; count: number };
            let list: TagItem[] | undefined;
            if (inlineEl?.textContent) {
                try {
                    const inline = JSON.parse(inlineEl.textContent);
                    //console.log('[Sidebar/Tags] using inline data', { inlineScope: inline?.scope, inlineLang: inline?.lang });
                    list = Array.isArray(inline?.tags) ? inline.tags : undefined;
                } catch { /* ignore */ }
            }
            if (!list) {
                const url = `/api/sidebar.json?scope=${encodeURIComponent(scope)}&lang=${encodeURIComponent(lang)}&_t=${Date.now()}`;
                //console.log('[Sidebar/Tags] refresh start (API)', { lang, defaultLang, scope, url });
                const res = await fetch(url);
                //console.log('[Sidebar/Tags] fetch response', res.status, res.ok);
                if (!res.ok) return;
                const data = await res.json();
                //console.log('[Sidebar/Tags] payload meta', data?.meta);
                list = data.tags || [];
            }
            
            if (!list) {
                console.warn('[Sidebar/Tags] No tags data available');
                return;
            }
            
            //console.log('[Sidebar/Tags] tags length', list.length, list.slice(0, 5));

            const container = document.querySelector('#sidebar #tags-list') || document.querySelector('#tags-list');
            if (!container) {
                console.warn('[Sidebar/Tags] #tags-list not found');
                return;
            }

            function archiveBase(lang: string, def: string) {
                return lang && lang !== def ? `/${lang}/archive` : `/archive`;
            }

            function notesTagUrl(tag: string) {
                return `/notes?tag=${encodeURIComponent(tag)}`;
            }

            const html = list.map((t: TagItem) => {
                const name = (t.name || '').trim();
                const href = scope === 'notes' ? notesTagUrl(name) : `${archiveBase(lang, defaultLang)}?tag=${encodeURIComponent(name)}`;
                if (name && Math.random() < 0.02) //console.log('[Sidebar/Tags] sample item', { name, href, scope });
                return `<a href="${href}" aria-label="View all posts with the ${name} tag" class="btn-regular h-8 text-sm px-3">${name}</a>`;
            }).join('');
            container.innerHTML = html;
            const sidebar = document.getElementById('sidebar');
            if (sidebar) {
                (sidebar as HTMLElement).setAttribute('data-scope', scope);
                (sidebar as HTMLElement).setAttribute('data-lang', lang);
                //console.log('[Sidebar/Tags] DOM updated, sidebar dataset', (sidebar as HTMLElement).dataset);
            }
        } catch (e) {
            console.error('[Sidebar/Tags] refresh error', e);
        }
    }

    // explicit event-driven update
    window.addEventListener('sidebar:update', (e: Event) => {
        const ce = e as CustomEvent<Params>;
        if (ce?.detail) {
            //console.log('[Sidebar/Tags] sidebar:update', ce.detail);
            refreshTags(ce.detail);
        }
    });
    // fallback initial from #page-state if no event yet
    const pageState = document.getElementById('page-state');
    if (pageState) {
        const lang = pageState.getAttribute('data-lang') || 'zh_cn';
        const def = pageState.getAttribute('data-default-lang') || 'zh_cn';
        const scope = (pageState.getAttribute('data-scope') || 'posts') as 'posts'|'notes'|'all';
        refreshTags({ lang, defaultLang: def, scope });
    }
});
</script>
