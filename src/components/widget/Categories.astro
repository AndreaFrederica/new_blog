---
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";
import {
	getAllCategoryList,
	getCategoryList,
	getNoteCategoryList,
} from "../../utils/content-utils";
import { getCategoryUrlWithLang } from "../../utils/i18n-utils";
import ButtonLink from "../control/ButtonLink.astro";
import WidgetLayout from "./WidgetLayout.astro";

interface Props {
	class?: string;
	style?: string;
	lang?: string;
	scope?: "posts" | "notes" | "all";
}
const className = Astro.props.class;
const style = Astro.props.style;
const lang = Astro.props.lang;
const scope = Astro.props.scope || "posts";

import type { Category } from "../../utils/content-utils";

let categories: Category[] = [];
if (scope === "notes") {
	categories = (await getNoteCategoryList(lang)) ?? [];
} else if (scope === "all") {
	categories = (await getAllCategoryList(lang)) ?? [];
} else {
	categories = (await getCategoryList(lang)) ?? [];
}

const COLLAPSED_HEIGHT = "7.5rem";
const COLLAPSE_THRESHOLD = 5;

const isCollapsed = categories.length >= COLLAPSE_THRESHOLD;
---

<WidgetLayout name={i18n(I18nKey.categories, lang)} id="categories" isCollapsed={isCollapsed} collapsedHeight={COLLAPSED_HEIGHT}
                class={className} style={style}
>
    <div id="categories-list">
        {categories.map((c) =>
            <ButtonLink
                url={scope === 'notes' ? (c.name ? `/notes?category=${encodeURIComponent(c.name)}` : '/notes?uncategorized=true') : getCategoryUrlWithLang(c.name, lang)}
                badge={String(c.count)}
                label={`View all posts in the ${c.name.trim()} category`}
            >
                {c.name.trim()}
            </ButtonLink>
        )}
    </div>
</WidgetLayout>

<script>
// @ts-nocheck
// 更新分类控件标题的函数
function updateCategoriesTitle(lang) {
    // 定义翻译映射
    const translations = {
        'zh_cn': '分类',
        'en': 'Categories',
        'ja': 'カテゴリー',
        'ru': 'Категории'
    };
    
    const currentTranslation = translations[lang as keyof typeof translations] || translations['zh_cn'];
    
    // 更新分类控件的标题
    const categoriesWidget = document.querySelector('widget-layout[data-id="categories"]');
    if (categoriesWidget) {
        const titleElement = categoriesWidget.querySelector('div.font-bold');
        if (titleElement) {
            titleElement.textContent = currentTranslation;
        }
    }
}

// 监听语言变化事件
function setupCategoriesLanguageListener() {
    window.addEventListener('languageChanged', (event) => {
        const customEvent = /** @type {CustomEvent<{ lang?: string }>} */ (event);
        if (customEvent.detail && customEvent.detail.lang) {
            updateCategoriesTitle(customEvent.detail.lang);
        }
    });
}

// 页面加载时设置监听器
document.addEventListener('DOMContentLoaded', () => {
    //console.log('[Sidebar/Categories] DOMContentLoaded');
    setupCategoriesLanguageListener();

    /**
     * @typedef {{ lang: string; defaultLang: string; scope: 'posts'|'notes'|'all' }} Params
     */
    /** @param {Params} params */
    async function refreshCategories(params) {
        try {
            const { lang, defaultLang, scope } = params;
            // prefer inline JSON embedded by server for this page
            const inlineEl = document.getElementById('sidebar-data');
        /** @type {{ name: string; count: number }[]} */
        let list = [];
            if (inlineEl?.textContent) {
                try {
                    const inline = JSON.parse(inlineEl.textContent);
                    //console.log('[Sidebar/Categories] using inline data', { inlineScope: inline?.scope, inlineLang: inline?.lang });
            list = Array.isArray(inline && inline.categories) ? inline.categories : [];
                } catch { /* ignore */ }
            }
            if (!list.length) {
                const url = `/api/sidebar.json?scope=${encodeURIComponent(scope)}&lang=${encodeURIComponent(lang)}&_t=${Date.now()}`;
                //console.log('[Sidebar/Categories] refresh start (API)', { lang, defaultLang, scope, url });
                const res = await fetch(url);
                //console.log('[Sidebar/Categories] fetch response', res.status, res.ok);
                if (!res.ok) return;
                const data = await res.json();
                //console.log('[Sidebar/Categories] payload meta', data?.meta);
                list = Array.isArray(data && data.categories) ? data.categories : [];
            }
            if (list) {
                //console.log('[Sidebar/Categories] categories length', list.length, list.slice(0, 3));
            } else {
                //console.log('[Sidebar/Categories] categories list is undefined');
            }

            const container = document.querySelector('#sidebar #categories-list') || document.querySelector('#categories-list');
            if (!container) {
                console.warn('[Sidebar/Categories] #categories-list not found');
                return;
            }

            function archiveBase(lang, def) {
                return lang && lang !== def ? `/${lang}/archive` : `/archive`;
            }

            const html = (list || []).map((c) => {
                const name = (c.name || '').trim();
                const href = scope === 'notes' ? (name ? `/notes?category=${encodeURIComponent(name)}` : '/notes?uncategorized=true') : `${archiveBase(lang, defaultLang)}?${name ? `category=${encodeURIComponent(name)}` : 'uncategorized=true'}`;
                if (name && c && (typeof c.count !== 'undefined')) {
                    // log first few entries
                    if (Math.random() < 0.02) {
                        //console.log('[Sidebar/Categories] sample item', { name, count: c.count, href, scope });
                    }
                }
                return `
                    <a href="${href}" aria-label="View all posts in the ${name} category">
                        <button class="w-full h-10 bg-none hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)] transition-all pl-2 hover:pl-3 text-neutral-700 hover:text-[var(--primary)] dark:text-neutral-300 dark:hover:text-[var(--primary)]">
                            <div class="flex items-center justify-between relative mr-2">
                                <div class="overflow-hidden text-left whitespace-nowrap overflow-ellipsis">${name}</div>
                                <div class="transition px-2 h-7 ml-4 min-w-[2rem] text-sm font-bold text-[var(--btn-content)] dark:text-[var(--deep-text)] bg-[oklch(0.95_0.025_var(--hue))] dark:bg-[var(--primary)] flex items-center justify-center">${c.count}</div>
                            </div>
                        </button>
                    </a>`;
            }).join('');
            container.innerHTML = html;
            const sidebar = document.getElementById('sidebar');
            if (sidebar) {
                sidebar.setAttribute('data-scope', scope);
                sidebar.setAttribute('data-lang', lang);
                //console.log('[Sidebar/Categories] DOM updated, sidebar dataset', (sidebar as HTMLElement).dataset);
            }
        } catch (e) {
            console.error('[Sidebar/Categories] refresh error', e);
        }
    }

    // explicit event-driven update
    window.addEventListener('sidebar:update', (e: Event) => {
    const ce = /** @type {CustomEvent<Params>} */ (e);
    if (ce && ce.detail) {
            //console.log('[Sidebar/Categories] sidebar:update', ce.detail);
            refreshCategories(ce.detail);
        }
    });
    // fallback initial from #page-state if no event yet
    const pageState = document.getElementById('page-state');
    if (pageState) {
    const lang = pageState.getAttribute('data-lang') || 'zh_cn';
    const def = pageState.getAttribute('data-default-lang') || 'zh_cn';
    /** @type {'posts'|'notes'|'all'} */
    const scope = /** @type {any} */ (pageState.getAttribute('data-scope') || 'posts');
    refreshCategories({ lang, defaultLang: def, scope });
    }
});